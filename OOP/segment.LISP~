(defclass SSD ()
  ((foreground :initform :white)
   (background :initform :white)
   (digit :initform 0)
   (window :initform nil)))

(defmethod foreground ((display SSD))
  (slot-value display 'foreground))

(defmethod set-foreground ((display SSD) color)
  (unless (typep color 'symbol)
    (error "the argument should be :color"))
  (setf (slot-value display 'foreground) color)
  display)

(defmethod background ((display SSD))
  (slot-value display 'background))

(defmethod set-background ((display SSD) color)
  (unless (typep color 'symbol)
    (error "the argument should be :color"))
  (setf (slot-value display 'background) color)
  display)

(defmethod digit ((display SSD))
  (slot-value display 'digit))

(defmethod set-digit ((display SSD) number)
  (unless (and (typep number 'number)
               (and (<= number 9) (>= number 0)))
    (error "argument should be a number"))
  (setf (slot-value display 'digit) number)
  display)

(defmethod window ((display SSD))
  (slot-value display 'window))

(defmethod set-window ((display SSD) value)
  (setf (slot-value display 'window) value)
  display)

(defmethod draw-poly ((poly polygon) x1 y1 x2 y2)
  (let ((point1 (make-instance 'point))
        (point2 (make-instance 'point)))
    (set-x point1 x1)
    (set-y point1 y1)
    (set-x point2 x2)
    (set-y point2 y2)
    (set-items poly (list point1 point2))))

(defvar poly1 (make-instance 'polygon))
(defvar poly2 (make-instance 'polygon))
(defvar poly3 (make-instance 'polygon))
(defvar poly4 (make-instance 'polygon))
(defvar poly5 (make-instance 'polygon))
(defvar poly6 (make-instance 'polygon))
(defvar poly7 (make-instance 'polygon))
(setf poly1 (draw-poly poly1 20 20 100 20))
(setf poly2 (draw-poly poly2 20 25 20 105))
(setf poly3 (draw-poly poly3 100 25 100 105))
(setf poly4 (draw-poly poly4 20 110 100 110))
(setf poly5 (draw-poly poly5 20 115 20 195))
(setf poly6 (draw-poly poly6 100 115 100 195))
(setf poly7 (draw-poly poly7 20 200 100 200))

(defmethod set-and-draw (window &rest args)
 (dolist (x args)
   (set-window x window))
 (dolist (y args)
   (draw y)))

(defmethod set-foregrounds (col &rest args)
  (dolist (x args)
    (set-color x col)))

(defmethod make ((ssd SSD) number)
  (let  ((w (window ssd))
         (for-color (slot-value ssd 'foreground)))
    (cond ((= number 0) (set-and-draw w poly1 poly2 poly3 poly5 poly6 poly7)
           (set-foregrounds for-color poly1 poly2 poly3 poly5 poly6 poly7))
          ((= number 1) (set-and-draw w poly2 poly5)
           (set-foregrounds for-color poly2 poly5))
          ((= number 2) (set-and-draw w poly1 poly3 poly4 poly5 poly7)
           (set-foregrounds for-color poly1 poly3 poly4 poly5 poly7))
          ((= number 3) (set-and-draw w poly1 poly3 poly4 poly6 poly7)
           (set-foregrounds for-color poly1 poly3 poly4 poly6 poly7))
          ((= number 4) (set-and-draw w poly2 poly4 poly6)
           (set-foregrounds for-color poly2 poly4 poly6))
          ((= number 5) (set-and-draw w poly1 poly2 poly4 poly6 poly7)
           (set-foregrounds for-color poly1 poly2 poly4 poly6 poly7))
          ((= number 6) (set-and-draw w poly1 poly2 poly4 poly5 poly6 poly7)
           (set-foregrounds for-color poly1 poly2 poly4 poly5 poly6 poly7))
          ((= number 7) (set-and-draw w poly1 poly3 poly6)
           (set-foregrounds for-color poly1 poly3 poly6))
          ((= number 8) (set-and-draw w poly1 poly2 poly3 poly4 poly5 poly6 poly7)
           (set-foregrounds for-color poly1 poly2 poly3 poly4 poly5 poly6 poly7))
          ((= number 9) (set-and-draw w poly1 poly2 poly3 poly4 poly6 poly7)
           (set-foregrounds for-color poly1 poly2 poly3 poly4 poly6 poly7)))))  


(defvar segments (make-instance 'SSD))

(defmethod draw-segments ((ssd SSD))
  (let ((num (digit ssd))
        (w (window ssd)))
    (redraw w)
    (make ssd num)))

(defmethod move ((ssd SSD) xs ys)
  (let ((lst (list poly1 poly2 poly3 poly4 poly5 poly6 poly7)))
    (dolist (polygon lst)
      (let ((current (items polygon)))
        (dolist (point current)
          (set-x point (+ (x point) xs))
          (set-y point (+ (y point) ys)))))
    (draw-segments ssd)))


;(defmethod rotate ())

;(defmethod scale ())

