(define proc
  (let ((stav 100))
    (lambda (x y)
      (let ((out 0))
        (if (> stav 0)
            (begin
              (set! out (* x y))
              (set! stav (- stav out))
              out)
            0)))))

;(proc 2 3)
;(proc 20 30)
;(proc 2 3)

(define expt
  (lambda (x y)
    (if (= y 0)
        1
        (* x (expt x (- y 1))))))


(define tester
 (let ((counter 0))
   (lambda (proc x y)
     (let ((out 0))
       (if (>= counter 0)
           (begin
             (set! out (proc x y))
             (set! counter (+ counter y))
             (display counter)
             (newline)
             (display out)
             (newline)))))))

(tester expt 2 3)
(tester expt 10 20)

(display " \nNEW\n")

(define test
  (let ((count 0))
    (lambda (proc . args)
      (fluid-let ((* (let ((* *))
                       (lambda args
                         (set! count (+ count 1))
                         (apply * args)))))
     (let ((vysledek (apply proc args)))
      (display count)
       (newline)
      vysledek)))))

(test expt 2 3)
(test expt 10 20)