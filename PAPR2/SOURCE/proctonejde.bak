(define-macro ifs
  (lambda (test expr . alt)
    `'(let ((result ,test))
       (if result
           ,expr
           ,@alt))))

;(ifs 10 result 50)

(define-macro fluid-end
  (lambda rest
    (if (null? rest)
        #t
    `(let (($result ,(car rest)))
       (cond ((equal? $result #f) #f)
             (,(null? (cdr rest)) $result)
             (else (fluid-end ,@(cdr rest))))))))



(define-macro help
  (lambda args
    (if (null? args)
        (void)
    `(let ((counter 0))
           (begin
             (set! counter ,(car args))
             (display counter)
             (newline)
             (help ,@(cdr args)))))))


(help 5 10 20)

(define-macro blah
  (lambda args
    (if (null? args)
        #f
        `(let ((counter 0)
               (result ,(car args)))
           (begin
             (set! counter result)
             (display counter))))))

(blah 1 2 3)


