(define mlist
  (lambda args
    (if (null? args)
        '()
        (mcons (car args) (apply mlist (cdr args))))))

(define cycle!
  (lambda (l)
    (let iter ((aux l))
      (if (null? (mcdr aux))
          (set-mcdr! aux l)
          (iter (mcdr aux))))))

(define s (apply mlist'(a b c d e)))
s
(cycle! s)
s

(define cyclic?
  (lambda (l)
    (let test ((rest (if (null? l)
                         '()
                         (mcdr l))))
      (cond ((null? rest) #f)
            ((eq? rest l)#t)
            (else (test (mcdr rest)))))))

(cyclic? s)

